#pragma once

/**
 * @file config.settings
 * @brief UART configuration settings for message-oriented communication
 * 
 * Protocol Format:
 * [START_DELIMITER(2)] [LENGTH(1)] [SOURCE_ID(1)] [PAYLOAD(0-248)] [CRC16(2)] [END_DELIMITER(2)]
 * 
 * Total message size: 256 bytes maximum
 * Maximum payload size: 248 bytes
 */

#include <cstddef>
#include <cstdint>

namespace ftl_config {

// =============================================================================
// UART Hardware Configuration
// =============================================================================

enum class UartId { Uart0, Uart1 };

constexpr UartId UART_ID = UartId::Uart0;
constexpr uint32_t BAUD_RATE = 230400;
constexpr uint32_t DATA_BITS = 8;
constexpr uint32_t STOP_BITS = 1;

// GPIO Pin Configuration (adjust for your hardware)
constexpr uint32_t TX_PIN = 0;  // GP0 for UART0 TX
constexpr uint32_t RX_PIN = 1;  // GP1 for UART0 RX

// =============================================================================
// Protocol Configuration
// =============================================================================

// Message delimiters
constexpr uint16_t START_DELIMITER = 0xAACC;
constexpr uint16_t END_DELIMITER = 0xDEFA;

// Protocol field sizes (in bytes)
constexpr size_t DELIMITER_SIZE = 2;
constexpr size_t LENGTH_SIZE = 1;
constexpr size_t SOURCE_ID_SIZE = 1;
constexpr size_t CRC_SIZE = 2;

// Maximum message sizes
constexpr size_t MAX_MESSAGE_SIZE = 256;
constexpr size_t PROTOCOL_OVERHEAD = DELIMITER_SIZE * 2 + LENGTH_SIZE + SOURCE_ID_SIZE + CRC_SIZE;
constexpr size_t MAX_PAYLOAD_SIZE = MAX_MESSAGE_SIZE - PROTOCOL_OVERHEAD;  // 248 bytes

// Message pool configuration
constexpr size_t MESSAGE_POOL_SIZE = 32;  // Number of messages in pool
constexpr size_t MESSAGE_QUEUE_DEPTH = 16; // Receive queue depth

// =============================================================================
// DMA Configuration
// =============================================================================

constexpr size_t RX_DMA_CHUNK_SIZE = 64;
constexpr size_t RX_CIRCULAR_BUFFER_SIZE = 1024;  // Must be power of 2
constexpr size_t TX_BUFFER_SIZE = MAX_MESSAGE_SIZE;

static_assert((RX_CIRCULAR_BUFFER_SIZE & (RX_CIRCULAR_BUFFER_SIZE - 1)) == 0, 
              "RX_CIRCULAR_BUFFER_SIZE must be power of 2");
static_assert(MAX_PAYLOAD_SIZE == 248, "Protocol overhead calculation error");

} // namespace ftl_config
